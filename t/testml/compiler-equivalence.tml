%TestML 0.1.0

Plan = 9

*grammar1.compile.yaml == *grammar2.compile.yaml

=== Simple Test Case
--- grammar1
a: /x/
--- grammar2
a:
    /x/

=== And over Or Precedence
--- grammar1
a: b c | d
--- grammar2
a: ( b c ) | d

=== And/Or Precedence with joining
--- grammar1
a: b % c | d %% e
--- grammar2
a: ( b % c ) | ( d %% e )

=== And/Or Precedence with grouping
--- grammar1
a:
     b c
   | (
        d
      | e
      | f g h i
   )
--- grammar2
a: ( b c ) | ( d | e | ( f g h i ) )

=== Extra Leading Pipe
--- grammar1
a: | b | c
--- grammar2
a: b | c

=== Extra Leading Pipe w/ Parens
--- grammar1
a: (
  | b
  | c
)
--- grammar2
a: b | c

=== In-Line Comments
--- grammar1
a:  # test
    b c  # not d
    /q/  # skipping to q
    % e  # using e here...
    ;    # comment -> semicolon test
--- grammar2
a: b c /q/ % e

=== Dashes in names
--- grammar1
a-a: b-b+ c-c
b_b: c_c-c /d/
c-c_c: e
--- grammar2
a_a: b_b+ c_c
b-b: c-c_c /d/
c_c_c: e

=== Token Per Line
--- SKIP: TODO
--- grammar1
a: /b/
--- grammar2
a
:
/b/

=== Whitespace Tokens
--- grammar1
a: - b + c -
b: /- cat + dog -/
--- grammar2
a: _ b __ c _
b: /~ cat ~~ dog ~/

=== Regex Combination
--- SKIP: TODO
--- grammar1: a: /b/ /c/
--- grammar2: a: /bc/

=== Regex Combination by Reference
--- SKIP: TODO
--- grammar1
a: b /c/
b: /b/
--- grammar2: a: /bc/

=== Multiple Rules Names per Definition
--- SKIP: TODO
--- grammar1
a b: /O HAI/
--- grammar2
a: /O HAI/
b: /O HAI/
